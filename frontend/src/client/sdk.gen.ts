// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise";
import { OpenAPI } from "./core/OpenAPI";
import { request as __request } from "./core/request";
import type {
	CategoriesReadCategoriesResponse,
	CategoriesCreateCategoryData,
	CategoriesCreateCategoryResponse,
	CategoriesReadCategoryData,
	CategoriesReadCategoryResponse,
	CategoriesUpdateCategoryData,
	CategoriesUpdateCategoryResponse,
	CategoriesDeleteCategoryData,
	CategoriesDeleteCategoryResponse,
	TasksReadTasksResponse,
	TasksCreateTaskData,
	TasksCreateTaskResponse,
	TasksReadTaskData,
	TasksReadTaskResponse,
	TasksUpdateTaskData,
	TasksUpdateTaskResponse,
	TasksDeleteTaskData,
	TasksDeleteTaskResponse,
} from "./types.gen";

export class CategoriesService {
	/**
	 * Read Categories
	 * @returns Category Successful Response
	 * @throws ApiError
	 */
	public static readCategories(): CancelablePromise<CategoriesReadCategoriesResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/categories/",
		});
	}

	/**
	 * Create Category
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns Category Successful Response
	 * @throws ApiError
	 */
	public static createCategory(
		data: CategoriesCreateCategoryData,
	): CancelablePromise<CategoriesCreateCategoryResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/categories/",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Read Category
	 * @param data The data for the request.
	 * @param data.categoryId
	 * @returns Category Successful Response
	 * @throws ApiError
	 */
	public static readCategory(
		data: CategoriesReadCategoryData,
	): CancelablePromise<CategoriesReadCategoryResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/categories/{category_id}",
			path: {
				category_id: data.categoryId,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Update Category
	 * @param data The data for the request.
	 * @param data.categoryId
	 * @param data.requestBody
	 * @returns Category Successful Response
	 * @throws ApiError
	 */
	public static updateCategory(
		data: CategoriesUpdateCategoryData,
	): CancelablePromise<CategoriesUpdateCategoryResponse> {
		return __request(OpenAPI, {
			method: "PUT",
			url: "/categories/{category_id}",
			path: {
				category_id: data.categoryId,
			},
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Delete Category
	 * @param data The data for the request.
	 * @param data.categoryId
	 * @returns Category Successful Response
	 * @throws ApiError
	 */
	public static deleteCategory(
		data: CategoriesDeleteCategoryData,
	): CancelablePromise<CategoriesDeleteCategoryResponse> {
		return __request(OpenAPI, {
			method: "DELETE",
			url: "/categories/{category_id}",
			path: {
				category_id: data.categoryId,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}
}

export class TasksService {
	/**
	 * Read Tasks
	 * @returns Task Successful Response
	 * @throws ApiError
	 */
	public static readTasks(): CancelablePromise<TasksReadTasksResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/tasks/",
		});
	}

	/**
	 * Create Task
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns Task Successful Response
	 * @throws ApiError
	 */
	public static createTask(
		data: TasksCreateTaskData,
	): CancelablePromise<TasksCreateTaskResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/tasks/",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Read Task
	 * @param data The data for the request.
	 * @param data.taskId
	 * @returns Task Successful Response
	 * @throws ApiError
	 */
	public static readTask(
		data: TasksReadTaskData,
	): CancelablePromise<TasksReadTaskResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/tasks/{task_id}",
			path: {
				task_id: data.taskId,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Update Task
	 * @param data The data for the request.
	 * @param data.taskId
	 * @param data.requestBody
	 * @returns Task Successful Response
	 * @throws ApiError
	 */
	public static updateTask(
		data: TasksUpdateTaskData,
	): CancelablePromise<TasksUpdateTaskResponse> {
		return __request(OpenAPI, {
			method: "PUT",
			url: "/tasks/{task_id}",
			path: {
				task_id: data.taskId,
			},
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Delete Task
	 * @param data The data for the request.
	 * @param data.taskId
	 * @returns Task Successful Response
	 * @throws ApiError
	 */
	public static deleteTask(
		data: TasksDeleteTaskData,
	): CancelablePromise<TasksDeleteTaskResponse> {
		return __request(OpenAPI, {
			method: "DELETE",
			url: "/tasks/{task_id}",
			path: {
				task_id: data.taskId,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}
}
