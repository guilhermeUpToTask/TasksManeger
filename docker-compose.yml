services:
  db:
    image: postgres:13-alpine
    environment:
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DATABASE_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    image: tasksmaneger_backend:latest
    build: ./backend/
    environment:
      - PROJECT_NAME=${PROJECT_NAME}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_HOST=db  # ‚Üê This is the critical fix
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_PORT=${DATABASE_PORT}
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
  prestart:
    image: tasksmaneger_backend:latest
    build:
      context: ./backend
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
        restart: true
    command: bash scripts/pre_start.sh
    environment:
      - PROJECT_NAME=${PROJECT_NAME}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_HOST=db
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_PORT=${DATABASE_PORT}
  nginx:
    image: tasksmaneger_nginx:latest
    build:
      context: . 
      dockerfile: nginx/Dockerfile
    environment:
      - PROJECT_NAME=${PROJECT_NAME}
      - VITE_API_URL=/api
    ports:
      - "80:80"
    networks:
      - app-network
    depends_on:
      - backend
     
volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge