name: Deploy

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      # Check out the repository code.
      - name: Checkout Code
        uses: actions/checkout@v3

      # Log in to GitHub Container Registry.
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push the backend image.
      - name: Build and Push Backend Image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/tasksmaneger_backend:latest

      # Build the React artifact (this creates the production-ready static files).
      - name: Build React Artifact
        working-directory: frontend
        run: |
          npm ci
          npm run build

      # Deploy the React build artifact to the EC2 instance.
      # This copies the contents of the generated `dist` folder (that Nginx serves) 
      # to the appropriate directory on your EC2 instance.
      - name: Deploy Frontend Artifact to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "frontend/dist/*"
          target: "/path/to/your/deployment/folder/frontend/dist/"

      # Connect to the EC2 instance via SSH and update the deployed containers.
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /path/to/your/deployment/folder
            # Pull the updated backend image from GHCR.
            docker-compose pull
            # Restart services in detached mode.
            docker-compose up -d
