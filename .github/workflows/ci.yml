name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  integration-test:
    runs-on: ubuntu-latest
    env:
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
      PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      DOCKER_IMAGE_BACKEND: tasksmaneger_backend:latest # need to fix the issue in ci, we need to run this env
      DOCKER_IMAGE_NGINX=: tasksmaneger_nginx:latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Start Services
        run: |
          set -e
          docker compose up -d --build

      - name: Wait for Database to be Ready
        run: |
          set -e
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..10}; do
            if docker compose exec db pg_isready -U "$DATABASE_USERNAME" -d "$DATABASE_NAME"; then
              echo "Database is ready!"
              exit 0
            fi
            echo "Attempt $i/10: Database not ready, waiting..."
            sleep 5
          done
          echo "PostgreSQL did not become ready in time."
          exit 1

      - name: Run Prestart Tasks
        run: docker compose run --rm prestart

      - name: Run Backend Tests
        run: docker compose exec backend pytest --maxfail=1 --disable-warnings -q

      - name: Wait for Nginx to be Ready
        run: |
          set -e
          echo "Waiting for Nginx to be ready..."
          for i in {1..10}; do
            if curl -s http://localhost:80 | grep -q "<html"; then
              echo "Nginx is ready!"
              exit 0
            fi
            echo "Attempt $i/10: Nginx not ready, waiting..."
            sleep 5
          done
          echo "Nginx did not become ready in time."
          exit 1

      - name: Test Frontend Served by Nginx
        run: |
          response=$(curl -s http://localhost:80)
          if echo "$response" | grep -q "<html"; then
            echo "Frontend is served correctly!"
          else
            echo "Frontend is not served correctly."
            exit 1
          fi

      - name: Tag and Push Docker Images
        run: |
          set -e
          images=(
            "tasksmaneger_backend:latest"
            "tasksmaneger_nginx:latest"
          )
          
          for image in "${images[@]}"; do
            echo "Tagging the image $image..."
            docker tag "$image" "${{ secrets.DOCKER_USERNAME }}/$image" || { echo "Failure in tagging $image"; exit 1; }
            echo "Pusing the image $image..."
            docker push "${{ secrets.DOCKER_USERNAME }}/$image" || { echo "fail on trying to push $image"; exit 1; }
          done

      - name: Tear Down Services
        if: always()
        run: docker compose down --volumes

## We omit playright for now justo to test the integration with docker hub, needs to put it back again later