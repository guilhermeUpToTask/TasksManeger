name: CI

on:
    pull_request:
        branches: [main]

jobs:
    integration-test:
        runs-on: ubuntu-latest
        env:
            DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
            DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
            DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
            DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
            PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
            DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
            DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
            SSL_CERTIFICATE: /etc/nginx/certs/dev.crt
            SSL_CERTIFICATE_KEY: /etc/nginx/certs/dev.key
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Generate self-signed certificate
              run: |
                  mkdir -p certs
                  openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
                    -keyout certs/dev.key \
                    -out certs/dev.crt \
                    -subj "/CN=localhost"

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
              with:
                  driver-opts: |
                      image=moby/buildkit:latest
                      network=host

            - name: Restore Buildx cache
              uses: actions/cache@v3
              with:
                  path: /tmp/.buildx-cache
                  key: ${{ runner.os }}-buildx-${{ hashFiles('docker-compose.yml', '**/Dockerfile') }}

                  restore-keys: |
                      ${{ runner.os }}-buildx-

            - name: Login to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build all images with caching
              env:
                  DOCKER_BUILDKIT: 1
                  BUILDKIT_PROGRESS: plain
              run: |
                  docker compose build \
                    --build-arg BUILDKIT_INLINE_CACHE=1 \
                    --build-arg BUILDKIT_CACHE_FROM=type=local,src=/tmp/.buildx-cache \
                    --build-arg BUILDKIT_CACHE_TO=type=local,dest=/tmp/.buildx-cache-new,mode=max \
                    --progress plain
                  # Update the cache folder for future runs
                  rm -rf /tmp/.buildx-cache && mv /tmp/.buildx-cache-new /tmp/.buildx-cache

            - name: Start services
              run: docker compose up -d

            - name: Wait for Database to be Ready
              run: |
                  set -e
                  echo "Waiting for PostgreSQL to be ready..."
                  for i in {1..10}; do
                    if docker compose exec db pg_isready -U "$DATABASE_USERNAME" -d "$DATABASE_NAME"; then
                      echo "Database is ready!"
                      exit 0
                    fi
                    echo "Attempt $i/10: Database not ready, waiting..."
                    sleep 5
                  done
                  echo "PostgreSQL did not become ready in time."
                  exit 1

            - name: Run Prestart Tasks
              run: docker compose run --rm prestart

            - name: Run Backend Tests
              run: docker compose exec backend pytest --maxfail=1 --disable-warnings -q

            - name: Wait for Nginx to be Ready
              run: |
                  set -e
                  echo "Waiting for Nginx to be ready..."
                  for i in {1..10}; do
                    if curl -s http://localhost:80 | grep -q "<html"; then
                      echo "Nginx is ready!"
                      exit 0
                    fi
                    echo "Attempt $i/10: Nginx not ready, waiting..."
                    sleep 5
                  done
                  echo "Nginx did not become ready in time."
                  exit 1

            - name: Test Frontend Served by Nginx
              run: |
                  response=$(curl -s http://localhost:80)
                  if echo "$response" | grep -q "<html"; then
                    echo "Frontend is served correctly!"
                  else
                    echo "Frontend is not served correctly."
                    exit 1
                  fi

            - name: Tag and Push Docker Images
              run: |
                  set -e
                  images=(
                    "tasksmaneger_backend-dev"
                    "tasksmaneger_nginx-dev"
                  )

                  for image in "${images[@]}"; do
                    prod_image=${image/-dev/-prod}
                    
                    echo "Tagging the image $image as $prod_image..."
                    # Tag the dev image to the prod image
                    docker tag "$image:latest" "${{ secrets.DOCKER_USERNAME }}/$prod_image:latest" || { echo "Failure in tagging $image"; exit 1; }

                    echo "Pushing the image $prod_image..."
                    docker push "${{ secrets.DOCKER_USERNAME }}/$prod_image" || { echo "fail on trying to push $prod_image"; exit 1; }
                  done

            - name: Tear Down Services
              if: always()
              run: docker compose down --volumes
